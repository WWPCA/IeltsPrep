name: Build iOS IPA

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: true
        default: 'release'
        type: choice
        options:
        - debug
        - release

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Capacitor CLI
      run: npm install -g @capacitor/cli
      
    - name: Build web assets
      run: |
        # Ensure web assets directory exists and copy templates (Flask app to Capacitor web)
        mkdir -p static
        cp -r templates/* static/ 2>/dev/null || true
        echo "Web assets prepared for iOS:"
        ls -la static/
        
    - name: Sync Capacitor
      run: |
        npx cap sync ios
        
    - name: Setup iOS certificates and provisioning profiles
      if: github.event.inputs.build_type == 'release' || github.ref == 'refs/heads/main'
      run: |
        # Create certificates directory
        mkdir -p ~/certs
        
        # Import certificates from secrets
        echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > ~/certs/certificate.p12
        echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/certs/profile.mobileprovision
        
        # Import certificate to keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import ~/certs/certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp ~/certs/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: Build iOS Debug
      if: github.event.inputs.build_type == 'debug' || github.ref != 'refs/heads/main'
      run: |
        cd ios
        xcodebuild -workspace App/App.xcworkspace \
                   -scheme App \
                   -configuration Debug \
                   -destination generic/platform=iOS \
                   -allowProvisioningUpdates \
                   DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
                   build
        
    - name: Build iOS Release
      if: github.event.inputs.build_type == 'release' || github.ref == 'refs/heads/main'
      run: |
        cd ios
        xcodebuild -workspace App/App.xcworkspace \
                   -scheme App \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath App.xcarchive \
                   DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
                   CODE_SIGN_STYLE=Automatic \
                   archive
                   
    - name: Export IPA (Release)
      if: github.event.inputs.build_type == 'release' || github.ref == 'refs/heads/main'
      run: |
        cd ios
        # Create export options plist
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.IOS_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild -exportArchive \
                   -archivePath App.xcarchive \
                   -exportOptionsPlist ExportOptions.plist \
                   -exportPath export \
                   -allowProvisioningUpdates
                   
    - name: Upload Debug Build Artifacts
      if: github.event.inputs.build_type == 'debug' || github.ref != 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: ielts-genai-prep-ios-debug-${{ github.run_number }}
        path: ios/build/Build/Products/Debug-iphoneos/
        retention-days: 30
        
    - name: Upload Release IPA
      if: github.event.inputs.build_type == 'release' || github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: ielts-genai-prep-ios-release-${{ github.run_number }}
        path: ios/export/*.ipa
        retention-days: 90
        
    - name: Create Release (iOS)
      if: github.ref == 'refs/heads/main' && (github.event.inputs.build_type == 'release' || github.event.inputs.build_type == '')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}-ios
        name: IELTS GenAI Prep iOS v${{ github.run_number }}
        body: |
          Automated iOS release build for IELTS GenAI Prep
          
          ## Changes
          - Built from commit: ${{ github.sha }}
          - Build number: ${{ github.run_number }}
          
          ## Downloads
          - iOS IPA: Available in release assets
          
        files: ios/export/*.ipa
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}